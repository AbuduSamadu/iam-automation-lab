package com.mascot;

import io.github.cdimascio.dotenv.Dotenv;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.iam.IamClient;
import software.amazon.awssdk.services.iam.model.CreateUserRequest;
import software.amazon.awssdk.services.iam.model.CreateLoginProfileRequest;
import software.amazon.awssdk.services.iam.model.AddUserToGroupRequest;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.CreateSecretRequest;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.PutParameterRequest;

public class LoginController {

    private final IamClient iamClient;
    private final SecretsManagerClient secretsManagerClient;
    private final SsmClient ssmClient;

    public LoginController() {
        Dotenv dotenv = Dotenv.load();
        String  accessKeyId = dotenv.get("AWS_ACCESS_KEY_ID");
        String secretAccessKey = dotenv.get("AWS_SECRET_ACCESS_KEY");

        AwsBasicCredentials awsCreds = AwsBasicCredentials.create(accessKeyId, secretAccessKey);

        Region region = Region.US_EAST_1;
        this.iamClient = IamClient.builder()
                .region(region)
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .build();
        this.secretsManagerClient = SecretsManagerClient.builder()
                .region(region)
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .build();
        this.ssmClient = SsmClient.builder()
                .region(region)
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .build();
    }

    public void createIamUser(String username, String groupName, String email) {
        try {
            // Step 1: Create IAM User
            iamClient.createUser(CreateUserRequest.builder().userName(username).build());

            // Step 2: Generate a temporary password and store it in Secrets Manager
            String secretName = username + "-password";
            String randomPassword = generateRandomPassword();
            secretsManagerClient.createSecret(CreateSecretRequest.builder()
                    .name(secretName)
                    .secretString(randomPassword)
                    .build());

            // Step 3: Create a login profile for the user
            iamClient.createLoginProfile(CreateLoginProfileRequest.builder()
                    .userName(username)
                    .password(randomPassword)
                    .passwordResetRequired(true)
                    .build());

            // Step 4: Add user to the specified group
            iamClient.addUserToGroup(AddUserToGroupRequest.builder()
                    .groupName(groupName)
                    .userName(username)
                    .build());

            // Step 5: Store user email in Parameter Store
            storeUserEmail(username, email);

            System.out.println("User " + username + " created successfully and added to group " + groupName + ".");
        } catch (Exception e) {
            System.err.println("Error creating IAM user: " + e.getMessage());
        }
    }

    private String generateRandomPassword() {
        return "AutoGeneratedPassword123"; // Replace with actual password generation logic
    }

    private void storeUserEmail(String username, String email) {
        String parameterName = "/user/" + username + "/email";
        ssmClient.putParameter(PutParameterRequest.builder()
                .name(parameterName)
                .value(email)
                .type("String")
                .overwrite(true)
                .build());
        System.out.println("Stored email for user " + username + ".");
    }

    public static void main(String[] args) {
        LoginController controller = new LoginController();
        controller.createIamUser("s3-user-2", "S3UserGroup", "s3-user@example.com");
        controller.createIamUser("ec2-user-2", "EC2UserGroup", "ec2-user@example.com");
    }
}